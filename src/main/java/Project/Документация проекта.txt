######################################
### Документация по исходному коду ###
######################################
========================================================
##### !! Система учета бюджета личных финансов !! ######
========================================================
########################################
### Дата: 10.09.2024                 ###
### Версия программы: 0.005          ###
### Автор программы: Лашко Валентин  ###
########################################
========================================================
#####################################
### Тест программного обеспечения ###
#####################################
========================================================
> BlackBox - Test <
- Петерс Лариса
--------------------------------------------------------
> WhiteBox - Test / JUNIT <
- Стрельцова Дана и Стекель Малгожата
========================================================
################################
### Техническая документация ###
### DRAFT: 0.06              ###
################################
========================================================
> Описание программы <
- Лашко Валентин
- Ротэрмель Евгений
========================================================
////////////////////////////////////////////////////////
##########################
### Организация файлов ###
##########################
========================================================
Главная папка называется Project.
Папка «Project» содержит 5 вложенных папок
и 1 главный исполняемый файл.
--------------------------------------------------------
К подпапкам относятся:
- DTO
- Entity
- Repository
- Service
- UserMenu
Основной исполняемый файл:
- FinanceApp

=======================================================
### Описание кода во вложенных папках ###
=======================================================

### Папка DTO ###
-----------------
В подпапке DTO содержится Класс <<Response>>

Класс response отвечает за реакцию состояний.
Дает ответ, что все в порядке или что произошла ошибка.
-------------------------------------------------------
-------------------------------------------------------
### Папка Entity ###

Подпапка Entity содержит 4 класса, а именно:
<<Account>>, <<Category>>, <<SourceOfIncome>> и <<User>>.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое Класса <<Account>>: #
----------------------------------
Класс отвечает за информацию о счете пользователя.

Double Income:              -Доход
Double Outcome:             -Расходы
String category:            -Категория операций (например, на питание, транспорт и т. д.)
LocalDate data:             -Текущая дата транзакций

Имеется конструктор класса.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое Класса <<Category>>: #
-----------------------------------
Класс отвечает за информацию за категории расходов.

String name:                -названия категорий расходов. (Например: отдых, еда, транспорт и т. д.).

Имеется конструктор класса.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<SourceOfIncome>>: #
-----------------------------------------
Класс отвечает за источники дохода

String name:                -Имя источника дохода - Названия источников дохода

Имеется конструктор класса.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<User>>: #
-------------------------------------------------------
Класс отвечает за информацию о пользователе.

String name:                -имя создаваемого пользователя
List<Balance> balances:     -Баланс пользователя
Integer id:                 -Уникальный идентификатор пользователя

Имеется конструктор класса.
-------------------------------------------------------
-------------------------------------------------------
### Папка Repository ###
------------------------
В подпапке Repository содержаться Классы:
<<Repository>> и <<RepositoryInterface>>
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<Repository>>: #

!!! Подробное описание класса Repository !!!

Класс Repository представляет собой реализацию интерфейса RepositoryInterface и выполняет
роль репозитория для хранения и управления пользователями и их финансовыми транзакциями,
такими как доходы и расходы. Ниже приведено описание каждого метода и логики класса.
Поля:
* List<User> users:        -список пользователей, хранящий всех добавленных в репозиторий пользователей.
* Integer userId:          -уникальный идентификатор для каждого пользователя. Он увеличивается на 1 при каждом добавлении
                            нового пользователя.

=====### Методы Repository ### =====

1.addUser(User user):
    -Добавляет нового пользователя в репозиторий.
    -Увеличивает userId на 1 для каждого нового пользователя и устанавливает его как идентификатор пользователя.
    -Добавляет пользователя в список users.
    -Возвращает объект пользователя после добавления.
2.addIncomeToUser(User user, Balance income):
    -Добавляет доход пользователю.
    -Находит пользователя по его идентификатору с помощью метода findUserById().
     Если пользователь найден, добавляет указанный доход в список балансов пользователя.
3.addOutcomeToUser(User user, Balance outcome):
    -Добавляет расход пользователю.
    -Работает аналогично методу addIncomeToUser(), но вместо дохода добавляет расход.
4.getCategoriesOfOutcomes():
    -Возвращает список возможных категорий расходов. Например, "Еда", "Транспорт", "Развлечения", и т.д.
5.getSourcesOfIncome():
    -Возвращает список возможных источников доходов. Например, "Зарплата", "Инвестиции", "Аренда", и т.д.
6.getTransactionHistory(User user):
    -Возвращает историю всех транзакций (доходов и расходов) для указанного пользователя.
    -Если пользователь найден (с помощью метода findUserById()), возвращает его список балансов, иначе — пустой список.
7.findUserById(Integer id):
    -Находит пользователя в списке users по его идентификатору. Возвращает объект Optional<User>, который содержит пользователя,
     если он найден, или пустой объект, если пользователь не найден.

=====### Основная логика ###=====

Класс Repository управляет списком пользователей и позволяет:
1.Добавлять новых пользователей в репозиторий.
2.Добавлять доходы и расходы пользователю.
3.Получать категории расходов и источники доходов.
4.Получать историю транзакций пользователя.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<RepositoryInterface>>: #

!!! Подробное описание интерфейса RepositoryInterface !!!

Интерфейс RepositoryInterface определяет контракт для классов, которые будут
управлять пользователями и их финансовыми транзакциями (доходы и расходы).
Этот интерфейс описывает набор методов, которые должны быть реализованы в классах,
использующих его, для работы с пользователями и их балансами.

=====### Методы RepositoryInterface ### =====

1.User addUser(User user):
    -Метод добавляет нового пользователя в репозиторий.
    -Принимает объект пользователя User.
    -Возвращает объект User с установленным идентификатором после добавления.
2.void addIncomeToUser(User user, Balance income):
    -Метод добавляет доход к пользователю.
    -Принимает объект пользователя User и объект баланса Balance, представляющий
     доход (сумма и источник дохода).
    -Не возвращает значения (тип void).
3.void addOutcomeToUser(User user, Balance outcome):
    -Метод добавляет расход к пользователю.
    -Принимает объект пользователя User и объект баланса Balance,
     представляющий расход (сумма и категория расхода).
    -Не возвращает значения.
4.List<String> getCategoriesOfOutcomes():
    -Метод возвращает список категорий расходов, которые могут быть учтены для пользователя.
    -Возвращает список строк (List<String>), например, такие категории,
     как "Еда", "Транспорт", "Развлечения" и т.д.
5.List<String> getSourcesOfIncome():
    -Метод возвращает список возможных источников дохода.
    -Возвращает список строк (List<String>), например, такие источники,
     как "Зарплата", "Инвестиции", "Аренда" и т.д.
6.List<Balance> getTransactionHistory(User user):
    -Метод возвращает историю транзакций для указанного пользователя.
    -Принимает объект пользователя User и возвращает список объектов Balance,
     представляющих доходы и расходы пользователя.

=====### Основная логика ###=====

Интерфейс RepositoryInterface предоставляет контракт, который обязывает реализующие
классы управлять пользователями и их финансовыми операциями.
Эти методы обеспечивают функциональность для добавления новых пользователей,
внесения доходов и расходов, а также предоставления списков категорий и источников
финансовых данных и истории транзакций.
Классы, реализующие этот интерфейс, могут быть частью системы управления финансами,
трекинга доходов и расходов пользователей.
-------------------------------------------------------
-------------------------------------------------------
### Папка Service ###
---------------------
В подпапке Service содержаться Классы:
<<BalanceOperationService>>, <<UserService>> и <<Validation>>
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<BalanceOperationService>>: #

!!! Подробное описание !!!

1. Класс BalanceOperationService обрабатывает финансовые операции, связанные с доходами
   и расходами пользователей.
2. Добавление новых доходов и расходов, создание отчетов и просмотр истории транзакций.

- Конструктор класса BalanceOperationService: Инициализирует репозиторий для управления
  пользователями.
- addNewIncome и addNewOutcome: эти методы используются для добавления новых финансовых
  транзакций (доходов и расходов) для данного пользователя.
- showHistoryOfOperations: Отображает историю транзакций пользователя.
- generateReport: генерирует финансовый отчет для пользователя на основе заданного диапазона дат.
- Response<User> findUserById: Находит пользователя по его ID.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<UserService>>: #

!!! Подробное описание !!!

1. Класс UserService управляет операциями с пользователями в системе.
2. Поддержка создания новых пользователей и их проверки.                                      
                                                                               
- Конструктор класса UserService. Создает новый экземпляр UserService с предоставленным
  репозиторием и проверкой.
- Репозиторий: Репозиторий для хранения и управления пользователями в системе.
- Validation: внешний класс, используемый для проверки пользовательских данных.
- Метод addNewUser: Добавляет нового пользователя в систему после предварительной проверки.
- Response<User>: тип возвращаемого значения, содержащий объект пользователя или сообщение
  об ошибке.
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<Validation>>: #

!!! Подробное описание !!!

1.Класс Validation используется для проверки данных, введенных пользователями,
  и правильности финансовых данных.

- Метод validateUser: проверяющий достоверность пользовательских данных.
  Проверяет, не пусто ли имя пользователя.
- Метод validateIncome и validateOutcome: подтверждения суммы дохода/ расходa.
  Проверяет, является ли значение дохода положительным.
- Метод validateDate: проверки даты. Проверяет, правильная ли дата (не будущая) и имеет
  ли она правильный формат.
- getDateInput() и getDoubleInput(): собирают данные от пользователя,
  проверяя формат даты и числа.
-------------------------------------------------------
-------------------------------------------------------
### Папка UserMenu ###
----------------------
В подпапке UserMenu содержаться Класс:
<<UserMenu>>
-------------------------------------------------------
-------------------------------------------------------
# Содержимое класса <<UserMenu>>: #

!!! Подробное описание !!!

1.Класс UserMenu отвечает за часть FrontEnd приложения.

Пользователю предлагается ввести число от 1 до 5, каждое из которых отвечает
за вызов соответствующего метода из Классов - сервисов.

Метод <<chooseFromList:>> Отображает список опций для пользователя и позволяет ему сделать выбор.

"1. Добавить пользователя"
"2. Ввести данные о доходе"
"3. Ввести данные о расходе"
"4. Вывести информацию о доходах и расходах"
"5. Сгенерировать сводный отчет по месяцам";
"0. Выход";
-------------------------------------------------------
-------------------------------------------------------
#######################################################
############## Главный Класс Приложения ###############
#################### FinanceApp #######################
#######################################################
!!! Запуск Приложения !!!

1. Создаём новый Объект <<userMenu>> --> UserMenu userMenu = new UserMenu();
2. Вызываем Метод <<menuStart();>> --> userMenu.menuStart();
3. Запускаем Приложения --> В консоли видно Меню с Категориями выбора действий.

The End - Thank You